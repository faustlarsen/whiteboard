



function changeEnough(arr,total) {
  let newTotal = arr[0] * 0.25 + arr[1] * 0.10 + arr[2] * 0.05 + arr[3] * 0.01;
  if (newTotal >= total) {
  return true;
  } else {
    return false; 
  }
}


function changeEnough([q, d, n, p],total) {
  (q*25 + d*10 + n*5 + p*1) / 100 >= total;
}

const changeEnough = ([q, d, n, p], a) => (q*25 + d*10 + n*5 + p*1) / 100 >= a

function changeEnough([q, d, n, p], a){
  (q*25 + d*10 + n*5 + p*1) / 100 >= a;
}
_________________________________________________________________________________

https://edabit.com/challenge/erFxBbqzZPSegMwnc

Given a total due and an array representing the amount of change 
in your pocket, determine whether or not you are able to pay for the item. 
Change will always be represented in the following order: quarters, dimes, nickels, pennies.

To illustrate: changeEnough([25, 20, 5, 0], 4.25) should yield true, 
since having 25 quarters, 20 dimes, 5 nickels and 0 pennies gives you 6.25 + 2 + .25 + 0 = 8.50.

Examples
changeEnough([2, 100, 0, 0], 14.11) ➞ false

changeEnough([0, 0, 20, 5], 0.75) ➞ true

Notes
quarter: 25 cents / $0.25
dime: 10 cents / $0.10
nickel: 5 cents / $0.05
penny: 1 cent / $0.01